import flask
from flask import Flask, request, redirect, render_template, url_for
import string
import random
import os
import sqlite3 # Import SQLite library

# Initialize the Flask application
app = Flask(__name__)
# Set a secret key for session management (important for production apps)
app.config['SECRET_KEY'] = 'gtavicecityboi' # In a real app, use a strong, random key from env variables

# --- SQLite Database Configuration ---
DB_NAME = 'urls.db'

def init_db():
    """Initializes the SQLite database and creates the urls table if it doesn't exist."""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS urls (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                long_url TEXT NOT NULL,
                short_slug TEXT UNIQUE NOT NULL
            )
        ''')
        conn.commit()
    except sqlite3.Error as e:
        print(f"Database error during initialization: {e}")
    finally:
        if conn:
            conn.close()

# Define a simple mapping for homoglyph characters
# This is a limited set for demonstration purposes.
# In a real-world scenario, homoglyph generation is more complex and dangerous.
HOMOGLYPH_MAP = {
    'o': 'Œø',  # Greek Omicron
    'a': '–∞',  # Cyrillic A
    'e': '–µ',  # Cyrillic Ye
    'c': '—Å',  # Cyrillic Es
    'y': '—É',  # Cyrillic U
    'p': '—Ä',  # Cyrillic Er
    'u': 'œÖ',  # Greek Upsilon
    'x': '—Ö',  # Cyrillic Ha
    'v': 'ŒΩ',  # Greek Nu
    't': 't',  # No common homoglyph, keep as is
    'b': 'b',  # No common homoglyph, keep as is
    '.': '.',  # Keep dot as is
}

def create_homoglyph_string(text):
    """
    Replaces certain characters in a string with their homoglyph counterparts
    for visual demonstration.
    """
    homoglyph_text = []
    for char in text:
        homoglyph_text.append(HOMOGLYPH_MAP.get(char.lower(), char))
    return "".join(homoglyph_text)

# Function to generate a random 6-character alphanumeric slug
def generate_short_slug(length=6):
    """
    Generates a random alphanumeric string of a given length,
    ensuring uniqueness against existing slugs in the database.
    """
    characters = string.ascii_letters + string.digits # All uppercase, lowercase letters, and digits
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        while True:
            slug = ''.join(random.choice(characters) for i in range(length))
            cursor.execute('SELECT id FROM urls WHERE short_slug = ?', (slug,))
            if cursor.fetchone() is None: # Check if the slug already exists
                return slug
    except sqlite3.Error as e:
        print(f"Database error during slug generation: {e}")
        return None # Indicate failure to generate a unique slug
    finally:
        if conn:
            conn.close()

# Route for the homepage, which displays the URL shortening form
@app.route('/', methods=['GET', 'POST'])
def index():
    """Handles the main page, displaying the form and processing URL shortening requests."""
    short_url = None
    homoglyph_display_url = None # Variable for displaying the homoglyph link

    if request.method == 'POST':
        long_url = request.form['long_url']
        if not long_url:
            # Basic validation: ensure the URL is not empty
            return render_template('index.html', error="Please enter a URL.")

        # Ensure the URL has a scheme (http/https) for proper redirection
        if not long_url.startswith(('http://', 'https://')):
            long_url = 'http://' + long_url

        slug = generate_short_slug()
        if slug is None:
            return render_template('index.html', error="Could not generate a unique short URL. Please try again.")

        conn = None
        try:
            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            cursor.execute('INSERT INTO urls (long_url, short_slug) VALUES (?, ?)', (long_url, slug))
            conn.commit()
        except sqlite3.IntegrityError: # Catch case where slug might somehow already exist (highly unlikely with generate_short_slug)
            return render_template('index.html', error="Generated slug already exists. Please try again.")
        except sqlite3.Error as e:
            print(f"Database error during URL insertion: {e}")
            return render_template('index.html', error="An error occurred while saving your URL.")
        finally:
            if conn:
                conn.close()

        # Construct the actual functional short URL that points to this Flask app
        short_url = url_for('redirect_to_long_url', slug=slug, _external=True)

        # Generate the homoglyph-mimicked URL for display purposes only
        # This URL is NOT clickable and is purely for demonstrating the concept.
        base_domain = "youtube.com"
        homoglyph_base = create_homoglyph_string(base_domain)
        homoglyph_display_url = f"https://{homoglyph_base}/{slug}"

        return render_template('index.html', short_url=short_url, long_url=long_url,
                               homoglyph_display_url=homoglyph_display_url)
    # For GET requests, just render the form
    return render_template('index.html')

# Route for redirecting short URLs to their original long URLs
@app.route('/<slug>')
def redirect_to_long_url(slug):
    """Redirects the user from the short URL to the original long URL."""
    conn = None
    long_url = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT long_url FROM urls WHERE short_slug = ?', (slug,))
        result = cursor.fetchone()
        if result:
            long_url = result[0]
    except sqlite3.Error as e:
        print(f"Database error during URL retrieval: {e}")
        # Fallback or error page if DB lookup fails
    finally:
        if conn:
            conn.close()

    if long_url:
        # Perform the redirection
        return redirect(long_url)
    else:
        # If the slug is not found, show a 404 error page
        return render_template('404.html'), 404

# --- HTML Templates ---
# Flask looks for templates in a 'templates' folder by default.
# You'll need to create these two files: index.html and 404.html

# templates/index.html
# This template contains the form for inputting the long URL and displays the shortened URL.
html_index_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URL Shortener</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
        }
        .container {
            background-color: #ffffff;
            padding: 2.5rem;
            border-radius: 1rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            width: 90%;
            text-align: center;
        }
        input[type="text"] {
            padding: 0.75rem 1rem;
            border: 1px solid #cbd5e0;
            border-radius: 0.5rem;
            width: calc(100% - 2rem);
            margin-bottom: 1rem;
            font-size: 1rem;
            transition: border-color 0.2s;
        }
        input[type="text"]:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
        }
        button {
            background-color: #3b82f6;
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
            width: 100%;
        }
        button:hover {
            background-color: #2563eb;
            transform: translateY(-1px);
        }
        .result-box {
            background-color: #e0f2fe;
            border: 1px solid #90cdf4;
            padding: 1rem;
            border-radius: 0.75rem;
            margin-top: 1.5rem;
            word-wrap: break-word; /* Ensures long URLs wrap */
        }
        .result-box a {
            color: #1e40af;
            text-decoration: none;
            font-weight: 600;
        }
        .result-box a:hover {
            text-decoration: underline;
        }
        .error-message {
            color: #ef4444;
            margin-top: 1rem;
            font-weight: 600;
        }
        .homoglyph-display {
            background-color: #fffbeb;
            border: 1px solid #fbd38d;
            padding: 1rem;
            border-radius: 0.75rem;
            margin-top: 1rem;
            word-wrap: break-word;
            color: #9c4221;
            font-weight: 500;
            text-align: left; /* Align text left for better readability of the URL */
        }
        .homoglyph-display strong {
            color: #c05621;
        }
        .homoglyph-display .homoglyph-url {
            font-family: 'monospace'; /* Use monospace for better display of homoglyphs */
            font-size: 1.1rem;
            color: #4b5563;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">üîó URL Shortener</h1>

        {% if error %}
            <p class="error-message">{{ error }}</p>
        {% endif %}

        <form method="POST" action="/">
            <input type="text" name="long_url" placeholder="Enter your long URL here" required
                   value="{{ long_url if long_url else '' }}">
            <button type="submit">Shorten URL</button>
        </form>

        {% if short_url %}
            <div class="result-box">
                <p class="text-lg text-gray-700 mb-2">Your shortened URL is:</p>
                <a href="{{ short_url }}" target="_blank" class="text-xl">{{ short_url }}</a>
                <p class="text-sm text-gray-500 mt-2">Original: {{ long_url }}</p>
            </div>
            {% if homoglyph_display_url %}
                <div class="homoglyph-display">
                    <p class="text-sm">For demonstration, this is how a homoglyph link <strong>could appear</strong>:</p>
                    <p class="homoglyph-url">{{ homoglyph_display_url }}</p>
                    <p class="text-xs text-gray-600 mt-1">
                        (Note: This is a visual example and not a functional link for your local server.)
                    </p>
                </div>
            {% endif %}
        {% endif %}
    </div>
</body>
</html>
"""

# templates/404.html
# This template is displayed when a short URL is not found.
html_404_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - Not Found</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            text-align: center;
        }
        .container {
            background-color: #ffffff;
            padding: 2.5rem;
            border-radius: 1rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            max-width: 400px;
            width: 90%;
        }
        h1 {
            color: #ef4444;
            font-size: 4rem;
            margin-bottom: 1rem;
        }
        p {
            color: #4b5563;
            font-size: 1.25rem;
            margin-bottom: 1.5rem;
        }
        a {
            background-color: #3b82f6;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-size: 1rem;
            transition: background-color 0.2s, transform 0.1s;
            display: inline-block;
        }
        a:hover {
            background-color: #2563eb;
            transform: translateY(-1px);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>404</h1>
        <p>Oops! The short URL you're looking for doesn't exist.</p>
        <a href="/">Go to Homepage</a>
    </div>
</body>
</html>
"""

# This part is for running the Flask app.
# In a real deployment, you might use a production-ready WSGI server like Gunicorn.
if __name__ == '__main__':
    # Ensure the 'templates' directory exists
    os.makedirs('templates', exist_ok=True)

    # Write the HTML templates to files with UTF-8 encoding
    with open('templates/index.html', 'w', encoding='utf-8') as f:
        f.write(html_index_template)
    with open('templates/404.html', 'w', encoding='utf-8') as f:
        f.write(html_404_template)

    # Initialize the database when the app starts
    init_db()

    # Run the Flask development server
    # debug=True allows for automatic reloading on code changes and provides a debugger
    app.run(debug=True)